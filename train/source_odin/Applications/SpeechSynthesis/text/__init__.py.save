#-*- coding: utf-8 -*-
import numpy as np
import re
from text import cleaners
from jamo import h2j
from itertools import chain

import re
from text import cleaners
from text.symbols import symbols


# Mappings from symbol to numeric ID and vice versa:
_symbol_to_id = {s: i for i, s in enumerate(symbols)}
_id_to_symbol = {i: s for i, s in enumerate(symbols)}
hangul_symbol_hcj = u'''␀␃ !,.?";-:()ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣᆞᆢㄱㄲㄳㄴㄵㄶㄷㄹㄺㄻㄼㄾㅀㅁㅂㅄㅅㅆㅇㅈㅊㅋㅌ
# Regular expression matching text enclosed in curly braces:
_curly_re = re.compile(r'(.*?)\{(.+?)\}(.*)')


def number_to_hangul(text):
    import re
    numbers = re.findall(r"[+-]?\d+(?:\.\d+)?", text)
    for number in numbers:
        number_text = digit2txt(number)
        text = text.replace(number, number_text, 1)
    return text


def digit2txt(strNum):
    # 만 단위 자릿수
    tenThousandPos = 4
    # 억 단위 자릿수
    hundredMillionPos = 9
    txtDigit = ['', '십', '백', '천', '만', '억']
    txtNumber = ['', '일', '이', '삼', '사', '오', '육', '칠', '팔', '구']
    txtPoint = '쩜 '
    resultStr = ''
    digitCount = 0
    #자릿수 카운트
    for ch in strNum:
        # ',' 무시
        if ch == ',':
            continue
        #소숫점 까지
        elif ch == '.':
            break
        digitCount = digitCount + 1
    digitCount = digitCount-1
    index = 0
    while True:
        notShowDigit = False
        ch = strNum[index]
        #print(str(index) + ' ' + ch + ' ' +str(digitCount))
        # ',' 무시
        if ch == ',':
            index = index + 1
            if index >= len(strNum):
                break
            continue
        if ch == '.':
            resultStr = resultStr + txtPoint
        else:
            #자릿수가 2자리이고 1이면 '일'은 표시 안함.
            # 단 '만' '억'에서는 표시 함
            if(digitCount > 1) and (digitCount != tenThousandPos) and  (digitCount != hundredMillionPos) and int(ch) == 1:
                resultStr = resultStr + ''
            elif int(ch) == 0:
                resultStr = resultStr + ''
                # 단 '만' '억'에서는 표시 함
                if (digitCount != tenThousandPos) and  (digitCount != hundredMillionPos):
                    notShowDigit = True
            else:
                resultStr = resultStr + txtNumber[int(ch)]
        # 1억 이상
        if digitCount > hundredMillionPos:
            if not notShowDigit:
                resultStr = resultStr + txtDigit[digitCount-hundredMillionPos]
        # 1만 이상
        elif digitCount > tenThousandPos:
            if not notShowDigit:
                resultStr = resultStr + txtDigit[digitCount-tenThousandPos]
        else:
            if not notShowDigit:
                resultStr = resultStr + txtDigit[digitCount]
        if digitCount <= 0:
            digitCount = 0
        else:
            digitCount = digitCount - 1
        index = index + 1
        if index >= len(strNum):
            break
    return resultStr

#
# #
# def get_hangul_to_ids():
#     hangul_to_ids = {char: idx for idx, char in enumerate(hangul_symbol)}
#     ids_to_hangul = {idx: char for idx, char in enumerate(hangul_symbol)}
#     return hangul_to_ids, ids_to_hangul
#

def hangul_to_sequence(hangul_text):
    # load conversion dictionaries
    ### clean number
    hangul_text_ = number_to_hangul(hangul_text)
    ### add end of sentence symbol
    hangul_text_ = hangul_text_ + u"␃"  # ␃: EOS
    ### get dictionary of chars
    hangul_to_ids= _symbol_to_id
    ### process jamos
    text = [h2j(char) for char in hangul_text_]
    text = chain.from_iterable(text)
    hangul_text_ = [h2j(char) for char in text]
    hangul_text_ = chain.from_iterable(hangul_text_)
    try:
        ### convert jamos to ids using dictionary
        sequence = [hangul_to_ids[char] for char in hangul_text_]
    except KeyError as e:
        raise KeyError('KeyError (at key: {}) when processing: {}'.format(e,hangul_text))
    return sequence

def text_to_sequence_(text, cleaner_names):
  sequence = []

  # Check for curly braces and treat their contents as ARPAbet:
  while len(text):
    m = _curly_re.match(text)
    if not m:
      sequence += _symbols_to_sequence(_clean_text(text, cleaner_names))
      break
    sequence += _symbols_to_sequence(_clean_text(m.group(1), cleaner_names))
    sequence += _arpabet_to_sequence(m.group(2))
    text = m.group(3)

  return sequence


def sequence_to_text(sequence):
  '''Converts a sequence of IDs back to a string'''
  result = ''
  for symbol_id in sequence:
    if symbol_id in _id_to_symbol:
      s = _id_to_symbol[symbol_id]
      # Enclose ARPAbet back in curly braces:
      if len(s) > 1 and s[0] == '@':
        s = '{%s}' % s[1:]
      result += s
  return result.replace('}{', ' ')


def _clean_text(text, cleaner_names):
  for name in cleaner_names:
    cleaner = getattr(cleaners, name)
    if not cleaner:
      raise Exception('Unknown cleaner: %s' % name)
    text = cleaner(text)
  return text


def _symbols_to_sequence(symbols):
  return [_symbol_to_id[s] for s in symbols if _should_keep_symbol(s)]


def _arpabet_to_sequence(text):
  return _symbols_to_sequence(['@' + s for s in text.split()])


def _should_keep_symbol(s):
  return s in _symbol_to_id and s is not '_' and s is not '~'


def group_words(s):
    return re.findall(u'[a-z]+', s)



def text_to_sequence(txt, cleaner):
    txt=txt.lower().strip() + u"␃"
    txt_list = re.split(r'([a-z]+)', txt)
    sequence=[]
    for txt_ in txt_list:
        try:
            sequence+=hangul_to_sequence(txt_)[:-1]
        except:
            sequence+=text_to_sequence_(txt_,cleaner)
    return sequence


# print(_symbol_to_id)
#Unfortunately he took to drink
# txt = '나무 코질 털어진 거 요Unfortunately drink만한씩 허는 것은 took그게 얼마 뒈질 안 헙니다.'


# sequence_to_text(text_to_sequence(txt, ['english_cleaners']))
